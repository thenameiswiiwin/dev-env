#!/usr/bin/env bash
# =====================================
# TMUX SESSION HYDRATION SCRIPT
# =====================================
# Sourced by tmux-sessionizer to configure new tmux sessions
# with project-specific layouts

# Skip home directory
if [[ "$PWD" == "$HOME" || "$PWD" == "$HOME/personal" ]]; then
  clear
  echo "No project-specific setup needed for home directory."
  return 0
fi

# Fast git detection
is_git_repo() {
  [[ -d ".git" ]] || git rev-parse --is-inside-work-tree &>/dev/null
}

# Get git root directory
get_git_root() {
  git rev-parse --show-toplevel
}

# Efficient window check
window_exists() {
  tmux list-windows -t "$1" -F '#{window_name}' 2>/dev/null | grep -q "^$2$"
}

# Create window if missing
create_window_if_missing() {
  local session="$1"
  local window="$2"

  if ! window_exists "$session" "$window"; then
    tmux new-window -t "$session" -n "$window"
  fi
}

# Optimized command execution
send_command() {
  local target="$1"
  local command="$2"
  tmux send-keys -t "$target" "$command" C-m
}

# Fast project window setup
setup_project_windows() {
  local session_name="$1"
  local git_root="$2"
  local windows=("${@:3}")

  # Create windows in parallel for speed
  for window in "${windows[@]}"; do
    create_window_if_missing "$session_name" "$window" &
  done
  wait

  # Configure each window
  for window in "${windows[@]}"; do
    send_command "$session_name:$window" "cd \"$git_root\" && clear"
  done

  # Return to edit window
  tmux select-window -t "$session_name:edit"
}

# Main execution path
main() {
  if is_git_repo; then
    git_root=$(get_git_root)
    session_name=$(basename "$git_root" | tr . _ | tr ' ' _)
    current_window=$(tmux display-message -p '#W')

    # Rename first window to "edit" if needed
    if [[ "$current_window" == "$session_name" || "$current_window" == "1" || "$current_window" == "main" ]]; then
      tmux rename-window -t 1 "edit"
    fi

    # Optimized project type detection (faster file checks)
    if [[ -f "$git_root/package.json" ]]; then
      echo "Setting up Node.js project environment"
      setup_project_windows "$session_name" "$git_root" "shell" "server" "test"
    elif [[ -f "$git_root/go.mod" ]]; then
      echo "Setting up Go project environment"
      setup_project_windows "$session_name" "$git_root" "shell" "run" "test"
    elif [[ -f "$git_root/Cargo.toml" ]]; then
      echo "Setting up Rust project environment"
      setup_project_windows "$session_name" "$git_root" "shell" "build" "test"
    elif [[ -f "$git_root/composer.json" ]]; then
      echo "Setting up PHP project environment"
      setup_project_windows "$session_name" "$git_root" "shell" "server" "test"
    elif [[ -f "$git_root/requirements.txt" || -f "$git_root/pyproject.toml" ]]; then
      echo "Setting up Python project environment"
      setup_project_windows "$session_name" "$git_root" "shell" "run" "test"
    else
      echo "Setting up generic project environment"
      setup_project_windows "$session_name" "$git_root" "shell"
    fi

    # Open editor in edit window
    if [[ "$(tmux display-message -p '#W')" == "edit" ]]; then
      send_command "$(tmux display-message -p '#S:edit')" "${EDITOR:-nvim} ."
    fi
  else
    # Simple non-git environment
    echo "Setting up standard environment"
    current_window=$(tmux display-message -p '#W')

    if [[ "$current_window" == "1" || "$current_window" == "main" ]]; then
      tmux rename-window -t 1 "edit"
    fi

    create_window_if_missing "$(tmux display-message -p '#S')" "shell"
    tmux select-window -t 1

    if [[ "$(tmux display-message -p '#W')" == "edit" ]]; then
      send_command "$(tmux display-message -p '#S:edit')" "${EDITOR:-nvim} ."
    fi
  fi

  # Clean start
  clear
}
