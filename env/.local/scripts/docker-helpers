#!/usr/bin/env bash

set -euo pipefail

usage() {
    echo "Docker helper utilities"
    echo "Usage: docker-helpers [command] [arguments]"
    echo "Commands:"
    echo "  clean              Remove unused containers, networks, images, volumes"
    echo "  stop-all           Stop all running containers"
    echo "  remove-all         Remove all containers (stopped)"
    echo "  logs [container]   Show logs for container with follow"
    echo "  exec [container]   Execute shell in container"
    echo "  build [dir] [tag]  Build image from Dockerfile"
    echo "  network [action]   Manage networks (ls, create, rm)"
    echo "  stats              Show container resource usage"
    exit 1
}

docker_clean() {
    echo "Cleaning Docker resources..."

    # Stop all containers first to prevent volume removal conflicts
    if [[ $(docker ps -q | wc -l) -gt 0 ]]; then
        echo "Stopping running containers..."
        docker stop "$(docker ps -q)"
    fi

    echo "Removing unused containers..."
    docker container prune -f

    echo "Removing unused networks..."
    docker network prune -f

    echo "Removing dangling images..."
    docker image prune -f

    echo "Removing unused volumes..."
    docker volume prune -f

    echo "Docker cleanup completed"
}

docker_stop_all() {
    echo "Stopping all Docker containers..."

    if [[ $(docker ps -q | wc -l) -gt 0 ]]; then
        docker stop "$(docker ps -q)"
        echo "All containers stopped"
    else
        echo "No running containers found"
    fi
}

docker_remove_all() {
    echo "Removing all Docker containers..."

    if [[ $(docker ps -a -q | wc -l) -gt 0 ]]; then
        docker stop "$(docker ps -a -q)" 2>/dev/null || true
        docker rm "$(docker ps -a -q)"
        echo "All containers removed"
    else
        echo "No containers found"
    fi
}

docker_logs() {
    local container="$1"
    echo "Showing logs for container $container..."
    docker logs -f "$container"
}

docker_exec() {
    local container="$1"
    local shell="${2:-bash}"

    if ! docker exec -it "$container" "$shell" 2>/dev/null; then
        # If bash fails, try sh
        docker exec -it "$container" sh
    fi
}

docker_build() {
    local dir="${1:-.}"
    local tag="${2:-latest}"

    if [[ ! -f "$dir/Dockerfile" ]]; then
        echo "Dockerfile not found in $dir"
        exit 1
    fi

    local image_name=$(basename "$(realpath "$dir")" | tr '[:upper:]' '[:lower:]')

    echo "Building Docker image $image_name:$tag from $dir/Dockerfile..."
    docker build -t "$image_name:$tag" "$dir"
    echo "Build completed: $image_name:$tag"
}

docker_network() {
    local action="$1"
    shift

    case "$action" in
    ls | list)
        docker network ls
        ;;
    create)
        if [[ $# -lt 1 ]]; then
            echo "Network name required"
            return 1
        fi
        docker network create "$1"
        ;;
    rm | remove)
        if [[ $# -lt 1 ]]; then
            echo "Network name required"
            return 1
        fi
        docker network rm "$1"
        ;;
    inspect)
        if [[ $# -lt 1 ]]; then
            echo "Network name required"
            return 1
        fi
        docker network inspect "$1"
        ;;
    *)
        echo "Unknown network action: $action"
        return 1
        ;;
    esac
}

docker_stats() {
    docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}\t{{.PIDs}}"
}

# Main command handling
if [[ $# -lt 1 ]]; then
    usage
fi

command="$1"
shift

case "$command" in
clean)
    docker_clean
    ;;
stop-all)
    docker_stop_all
    ;;
remove-all)
    docker_remove_all
    ;;
logs)
    if [[ $# -lt 1 ]]; then
        echo "Error: Container ID/name required"
        usage
    fi
    docker_logs "$1"
    ;;
exec)
    if [[ $# -lt 1 ]]; then
        echo "Error: Container ID/name required"
        usage
    fi
    docker_exec "$1" "${2:-}"
    ;;
build)
    docker_build "${1:-}" "${2:-}"
    ;;
network)
    if [[ $# -lt 1 ]]; then
        echo "Error: Network action required"
        usage
    fi
    docker_network "$@"
    ;;
stats)
    docker_stats
    ;;
*)
    echo "Unknown command: $command"
    usage
    ;;
esac
