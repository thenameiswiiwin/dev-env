#!/usr/bin/env bash
# Core utility libraries installation

set -euo pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
if ! source "$script_dir/../utilities" 2>/dev/null; then
  echo "Failed to source utilities"
  exit 1
fi

main() {
  log "INFO" "Starting libs setup"

  # Initialize either Homebrew or set ARM Linux flag
  init_homebrew

  # Core utilities to install - universal packages
  local packages=(
    "git"      # Version control
    "gh"       # Github CLI
    "ripgrep"  # Fast grep alternative
    "wget"     # File downloader
    "jq"       # JSON processor
    "fd"       # Fast find alternative
    "fzf"      # Fuzzy finder
    "tree"     # Directory structure visualizer
    "tealdeer" # TL;DR pages client (simplified man pages)
  )

  # OS-specific packages
  if [[ "$OS" = "Linux" ]]; then
    packages+=("xclip") # Clipboard utility for Linux
  elif [[ "$OS" = "Darwin" ]]; then
    packages+=("coreutils") # GNU core utilities
    packages+=("findutils") # GNU find utilities
    packages+=("gnu-sed")   # GNU sed
    packages+=("grep")      # GNU grep
  fi

  # Install each package with appropriate method
  for package in "${packages[@]}"; do
    log "INFO" "Installing $package"
    install_package "$package" || {
      log "WARN" "Failed to install $package, trying alternative methods"

      # Try system-specific package managers
      if [[ "$IS_ARM_LINUX" -eq 1 || "$IS_ARM_CPU" -eq 1 ]]; then
        log "INFO" "Trying system package manager for $package"
        install_with_system_package_manager "$package"
      else
        log "WARN" "Could not install $package with any available method"
      fi
    }
  done

  # Verify installations
  log "INFO" "Verifying installations"
  for package in "${packages[@]}"; do
    # Use a more flexible check for packages on ARM Linux
    if command_exists "$package" || brew_installed "$package"; then
      log "INFO" "$package is installed"
    else
      log "WARN" "$package installation could not be verified"
    fi
  done

  # Configure fzf - adjust for ARM Linux
  if command_exists fzf; then
    log "INFO" "Setting up fzf key bindings and completion"

    if [[ "$IS_ARM_LINUX" -eq 1 ]]; then
      # For ARM Linux, check if fzf completion files are in standard locations
      if [[ -f "/usr/share/fzf/key-bindings.bash" ]]; then
        log "INFO" "Found fzf key bindings in system location"
      else
        log "INFO" "Installing fzf completion files from GitHub"
        if [[ ${DRY_RUN:-0} -eq 0 ]]; then
          mkdir -p ~/.fzf
          # Download latest fzf shell integration files
          curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.bash -o ~/.fzf/key-bindings.bash
          curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.bash -o ~/.fzf/completion.bash
          curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh -o ~/.fzf/key-bindings.zsh
          curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.zsh -o ~/.fzf/completion.zsh
        else
          log "DRY" "Would download fzf completion files from GitHub"
        fi
      fi
    else
      # For non-ARM systems, use Homebrew's fzf setup
      local fzf_base
      if brew_installed "fzf"; then
        fzf_base="$(brew --prefix)/opt/fzf"
      elif [[ -d "$HOME/.fzf" ]]; then
        fzf_base="$HOME/.fzf"
      fi

      if [[ -n "${fzf_base:-}" ]]; then
        if [[ -f "$fzf_base/install" ]]; then
          if [[ ${DRY_RUN:-0} -eq 0 ]]; then
            # Install fzf key bindings and completion, no shell-specific config
            "$fzf_base/install" --key-bindings --completion --no-update-rc --no-bash --no-fish
          else
            log "DRY" "Would install fzf key bindings and completion"
          fi
        else
          log "WARN" "fzf install script not found"
        fi
      fi
    fi
  fi

  # Configure tealdeer (tldr)
  if command_exists tldr; then
    log "INFO" "Updating tldr pages"
    if [[ ${DRY_RUN:-0} -eq 0 ]]; then
      tldr --update || log "WARN" "Failed to update tldr pages"
    else
      log "DRY" "Would update tldr pages"
    fi
  fi

  log "SUCCESS" "Libs setup completed"
  return 0
}

main
exit $?
