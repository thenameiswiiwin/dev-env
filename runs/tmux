#!/usr/bin/env bash
# tmux installation and configuration

set -euo pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
if ! source "$script_dir/../utilities" 2>/dev/null; then
  echo "Failed to source utilities"
  exit 1
fi

main() {
  log "INFO" "Starting tmux setup"

  init_homebrew

  log "INFO" "Installing tmux"
  if ! install_package "tmux"; then
    log "WARN" "Failed to install tmux with Homebrew, trying system package manager"

    if [[ "$OS" = "Linux" ]]; then
      if ! install_with_system_package_manager "tmux"; then
        log "ERROR" "Failed to install tmux with system package manager"

        # Build from source as a last resort - handles ARM and other architectures
        log "INFO" "Trying to build tmux from source"

        # Check and install dependencies based on distribution
        local dependencies
        if command_exists apt; then
          dependencies=("libevent-dev" "libncurses-dev" "build-essential")
        elif command_exists pacman; then
          dependencies=("libevent" "ncurses" "base-devel")
        elif command_exists apk; then
          dependencies=("libevent-dev" "ncurses-dev" "build-base")
        else
          # Default dependencies for unknown distributions
          dependencies=("libevent-dev" "libncurses-dev" "make" "gcc")
        fi

        # Install build dependencies
        for dep in "${dependencies[@]}"; do
          local mapped_pkg
          mapped_pkg=$(map_package_name "$dep" "$(get_system_package_manager)")
          install_with_system_package_manager "$mapped_pkg" || log "WARN" "Failed to install $mapped_pkg"
        done

        # Build tmux from source
        if [[ ${DRY_RUN:-0} -eq 0 ]]; then
          local tmp_dir
          tmp_dir=$(mktemp -d)
          log "INFO" "Created temporary directory: $tmp_dir"

          execute "cd $tmp_dir && git clone https://github.com/tmux/tmux.git" "Cloning tmux repository"
          execute "cd $tmp_dir/tmux && sh autogen.sh && ./configure && make" "Building tmux"
          execute "cd $tmp_dir/tmux && sudo make install" "Installing tmux"
          execute "rm -rf $tmp_dir" "Cleaning up temporary directory"
        else
          log "DRY" "Would build and install tmux from source"
        fi
      fi
    else
      log "ERROR" "Failed to install tmux on non-Linux system"
      return 1
    fi
  fi

  # Install tmux plugin manager (TPM) with architecture awareness
  tmux_plugin_dir="$HOME/.tmux/plugins/tpm"
  log "INFO" "Installing tmux plugin manager"

  if [[ ${DRY_RUN:-0} -eq 0 ]]; then
    if [[ ! -d "$tmux_plugin_dir" ]]; then
      execute "git clone https://github.com/tmux-plugins/tpm \"$tmux_plugin_dir\"" "Cloning tmux plugin manager" ||
        log "WARN" "Failed to install tmux plugin manager"
    else
      log "INFO" "tmux plugin manager already installed"
      execute "cd \"$tmux_plugin_dir\" && git pull" "Updating tmux plugin manager" ||
        log "WARN" "Failed to update tmux plugin manager"
    fi
  else
    log "DRY" "Would install tmux plugin manager"
  fi

  # Create tmux configuration directory
  tmux_config_dir="$XDG_CONFIG_HOME/tmux"
  if [[ ! -d "$tmux_config_dir" ]]; then
    log "INFO" "Creating tmux configuration directory"
    execute "mkdir -p \"$tmux_config_dir\"" "Creating directory"
  fi

  # Create symlink for backward compatibility
  if [[ ! -f "$HOME/.tmux.conf" ]]; then
    log "INFO" "Creating symlink for backward compatibility"
    execute "ln -sf \"$tmux_config_dir/tmux.conf\" \"$HOME/.tmux.conf\"" "Creating symlink"
  fi

  # Verify installation
  if command_exists tmux; then
    tmux_version=$(tmux -V)
    log "INFO" "tmux installed successfully: $tmux_version"
  else
    # Check for installed but not in PATH
    if [[ -x "/usr/local/bin/tmux" ]]; then
      tmux_version=$("/usr/local/bin/tmux" -V)
      log "INFO" "tmux installed but not in PATH: $tmux_version"
      log "INFO" "You may need to add /usr/local/bin to your PATH"
    else
      log "WARN" "tmux installation could not be verified"
    fi
  fi

  log "SUCCESS" "tmux setup completed"
  return 0
}

main
exit $?
