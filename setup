#!/usr/bin/env bash
# setup - Unified environment setup script
# Usage: ./setup [--dry]
#   --dry: Dry run mode (preview changes without making them)

set -euo pipefail

# Detect if script is being piped
SCRIPT_PIPE=0
if [ -t 0 ]; then
  SCRIPT_PIPE=0
else
  SCRIPT_PIPE=1
fi

# Default environment variables
: "${DEV_ENV:="$HOME/dev"}"
: "${XDG_CONFIG_HOME:="$HOME/.config"}"
export DEV_ENV XDG_CONFIG_HOME
export REPO_URL="https://github.com/thenameiswiiwin/dev-env.git"
export REPO_BRANCH="main"

# Process command-line arguments
dry_run=0
if [[ "${1:-}" == "--dry" ]]; then
  dry_run=1
  export DRY_RUN=1
fi

# Colors for logging
readonly COLOR_RED="\033[1;31m"
readonly COLOR_GREEN="\033[1;32m"
readonly COLOR_YELLOW="\033[1;33m"
readonly COLOR_BLUE="\033[1;34m"
readonly COLOR_CYAN="\033[1;36m"
readonly COLOR_RESET="\033[0m"

# System detection with explicit exports
OS="$(uname -s)"
ARCH="$(uname -m)"
IS_ARM_CPU=$([ "$ARCH" == "arm64" ] || [ "$ARCH" == "aarch64" ] && echo 1 || echo 0)
IS_ARM_LINUX=$([ "$IS_ARM_CPU" -eq 1 ] && [ "$OS" == "Linux" ] && echo 1 || echo 0)
readonly OS
readonly ARCH
readonly IS_ARM_CPU
readonly IS_ARM_LINUX

# Logging function
log() {
  local level="$1"
  local message="$2"
  local color=""

  case "$level" in
  SUCCESS) color="$COLOR_GREEN" ;;
  INFO) color="$COLOR_BLUE" ;;
  WARN) color="$COLOR_YELLOW" ;;
  ERROR) color="$COLOR_RED" ;;
  DRY) color="$COLOR_CYAN" ;;
  *) color="$COLOR_RESET" ;;
  esac

  if [[ $dry_run -eq 1 && "$level" != "DRY" ]]; then
    echo -e "${COLOR_CYAN}[DRY_RUN]${COLOR_RESET} $message"
  else
    echo -e "${color}[$level]${COLOR_RESET} $message"
  fi
}

# Command existence checker
command_exists() {
  command -v "$1" &>/dev/null
}

# Safe command execution
execute() {
  local cmd="$1"
  local description="${2:-Executing command}"

  if [[ $dry_run -eq 1 ]]; then
    log "DRY" "$description: $cmd"
    return 0
  else
    log "INFO" "$description"
    if eval "$cmd"; then
      return 0
    else
      local exit_code=$?
      log "ERROR" "Command failed with exit code $exit_code: $cmd"
      return $exit_code
    fi
  fi
}

# Safe curl execution with proper error handling
safe_curl() {
  local url="$1"
  local output="${2:-}"
  local description="${3:-Downloading from $url}"
  local curl_opts="-fsSL --connect-timeout 15 --retry 3"

  if [[ -n "$output" ]]; then
    curl_opts="$curl_opts -o $output"
  fi

  log "INFO" "$description"

  if [[ $dry_run -eq 1 ]]; then
    log "DRY" "Would run: curl $curl_opts $url"
    return 0
  else
    if curl $curl_opts "$url"; then
      return 0
    else
      local exit_code=$?
      log "ERROR" "curl failed with exit code $exit_code: $url"
      return $exit_code
    fi
  fi
}

# Check if running in interactive mode
is_interactive() {
  [[ -t 0 ]]
}

# Initialize Homebrew with platform detection
init_homebrew() {
  # Skip for ARM Linux
  if [[ $IS_ARM_LINUX -eq 1 ]]; then
    log "INFO" "Using system packages on ARM Linux"
    return 0
  fi

  # Platform-specific initialization
  if [[ "$OS" == "Darwin" ]]; then
    # macOS - handle ARM vs Intel
    if [[ "$ARCH" == "arm64" && -f /opt/homebrew/bin/brew ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -f /usr/local/bin/brew ]]; then
      eval "$(/usr/local/bin/brew shellenv)"
    fi
  elif [[ "$OS" == "Linux" ]]; then
    # Linux Homebrew locations
    if [[ -d "$HOME/.linuxbrew" ]]; then
      eval "$("$HOME"/.linuxbrew/bin/brew shellenv)"
    elif [[ -d "/home/linuxbrew/.linuxbrew" ]]; then
      eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    fi
  fi
}

# Ensure Homebrew is in PATH
ensure_homebrew_in_path() {
  # Skip for ARM Linux
  if [[ $IS_ARM_LINUX -eq 1 ]]; then
    return 0
  fi

  local brew_bin=""

  # Platform-specific Homebrew paths
  if [[ "$OS" == "Darwin" ]]; then
    if [[ "$ARCH" == "arm64" && -f /opt/homebrew/bin/brew ]]; then
      brew_bin="/opt/homebrew/bin"
    elif [[ -f /usr/local/bin/brew ]]; then
      brew_bin="/usr/local/bin"
    fi
  elif [[ "$OS" == "Linux" ]]; then
    if [[ -d "$HOME/.linuxbrew" ]]; then
      brew_bin="$HOME/.linuxbrew/bin"
    elif [[ -d "/home/linuxbrew/.linuxbrew" ]]; then
      brew_bin="/home/linuxbrew/.linuxbrew/bin"
    fi
  fi

  # Add to PATH if found
  if [[ -n "$brew_bin" ]]; then
    export PATH="$brew_bin:$PATH"
    log "INFO" "Added $brew_bin to PATH"
  fi
}

# Install Homebrew with platform awareness
install_homebrew() {
  # Skip for ARM Linux
  if [[ $IS_ARM_LINUX -eq 1 ]]; then
    log "INFO" "Skipping Homebrew installation on ARM Linux"
    return 0
  fi

  log "INFO" "Installing Homebrew..."
  if [[ $dry_run -eq 0 ]]; then
    safe_curl "https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh" "/tmp/homebrew-install.sh" "Downloading Homebrew installer" || {
      log "ERROR" "Failed to download Homebrew installer"
      return 1
    }
    bash /tmp/homebrew-install.sh || {
      log "ERROR" "Failed to install Homebrew"
      log "INFO" "Trying alternative installation method..."

      # For Linux systems that might need dependencies
      if [[ "$OS" == "Linux" ]]; then
        log "INFO" "Installing dependencies for Homebrew..."

        if command_exists apt; then
          execute "sudo apt-get update && sudo apt-get install -y build-essential curl file git" "Installing Homebrew dependencies with apt"
        elif command_exists pacman; then
          execute "sudo pacman -Sy --noconfirm base-devel curl file git" "Installing Homebrew dependencies with pacman"
        elif command_exists apk; then
          execute "sudo apk add --no-cache build-base curl file git" "Installing Homebrew dependencies with apk"
        fi

        # Try installation again
        bash /tmp/homebrew-install.sh || {
          log "ERROR" "Failed to install Homebrew again"
          return 1
        }
      else
        return 1
      fi
    }

    # Clean up installer
    rm -f /tmp/homebrew-install.sh
  else
    log "DRY" "Would install Homebrew"
  fi

  return 0
}

# Install Bash 4 or newer with Homebrew
install_modern_bash() {
  if ! command_exists bash || [[ $OS == "Darwin" ]]; then
    local bash_version
    bash_version=$(bash --version | head -n1 | cut -d' ' -f4 | cut -d'.' -f1)

    # If Bash version is less than 4, install newer version
    if [[ -z "$bash_version" || "$bash_version" -lt 4 ]]; then
      log "INFO" "Detected Bash version < 4.0, installing modern Bash with Homebrew"

      # Install newer Bash with Homebrew
      if command_exists brew; then
        execute "brew install bash" "Installing Bash 5 with Homebrew"

        # Get path to new Bash
        local brew_bash
        brew_bash="$(brew --prefix)/bin/bash"

        # Add to /etc/shells if not already there
        if [[ -f "$brew_bash" ]] && ! grep -q "$brew_bash" /etc/shells; then
          log "INFO" "Adding Homebrew Bash to /etc/shells"
          execute "echo '$brew_bash' | sudo tee -a /etc/shells" "Adding Bash to /etc/shells"

          # Suggest changing shell
          log "INFO" "You can change your default shell to modern Bash with:"
          log "INFO" "  chsh -s $brew_bash"
        fi

        # Since we can't change the current shell in this script,
        # let's check if the PATH is set up correctly
        if [[ ":$PATH:" != *":$(brew --prefix)/bin:"* ]]; then
          log "INFO" "Adding Homebrew bin to PATH"
          export PATH="$(brew --prefix)/bin:$PATH"
        fi

        # Verify installation
        if "$brew_bash" --version >/dev/null 2>&1; then
          local new_version
          new_version=$("$brew_bash" --version | head -n1 | cut -d' ' -f4)
          log "SUCCESS" "Modern Bash $new_version installed successfully"
        else
          log "ERROR" "Failed to verify modern Bash installation"
        fi
      else
        log "ERROR" "Homebrew not available, cannot install modern Bash"
      fi
    else
      log "INFO" "Bash $bash_version already installed, no upgrade needed"
    fi
  fi
}

# Install core packages on ARM Linux
install_core_packages_arm_linux() {
  log "INFO" "Installing core packages for ARM Linux with system package manager"

  # Detect package manager
  if command_exists apt; then
    log "INFO" "Using apt package manager"
    execute "sudo apt-get update" "Updating apt package lists"
    execute "sudo apt-get install -y git curl build-essential python3 python3-pip zsh tmux neovim bash" "Installing core packages with apt"
  elif command_exists pacman; then
    log "INFO" "Using pacman package manager"
    execute "sudo pacman -Sy --noconfirm git curl base-devel python python-pip zsh tmux neovim bash" "Installing core packages with pacman"
  elif command_exists dnf; then
    log "INFO" "Using dnf package manager"
    execute "sudo dnf install -y git curl make gcc python3 python3-pip zsh tmux neovim bash" "Installing core packages with dnf"
  elif command_exists yum; then
    log "INFO" "Using yum package manager"
    execute "sudo yum install -y git curl make gcc python3 python3-pip zsh tmux neovim bash" "Installing core packages with yum"
  elif command_exists apk; then
    log "INFO" "Using apk package manager"
    execute "sudo apk add --no-cache git curl build-base python3 py3-pip zsh tmux neovim bash" "Installing core packages with apk"
  else
    log "ERROR" "No supported package manager found"
    return 1
  fi

  return 0
}

# Main setup function
setup() {
  log "INFO" "Detected $OS system on $ARCH architecture"

  # Check supported OS
  if [[ "$OS" != "Darwin" && "$OS" != "Linux" ]]; then
    log "ERROR" "Unsupported operating system: $OS"
    exit 1
  fi

  # Set Homebrew environment variables
  export HOMEBREW_NO_ENV_HINTS=1
  export HOMEBREW_NO_INSTALL_CLEANUP=1

  # Choose platform-specific approach
  if [[ $IS_ARM_LINUX -eq 1 ]]; then
    log "INFO" "ARM Linux detected, using system package managers"
    install_core_packages_arm_linux
  else
    # Handle Homebrew installation
    if ! command_exists brew; then
      install_homebrew
      init_homebrew
    else
      log "INFO" "Homebrew is already installed"
      init_homebrew
    fi

    ensure_homebrew_in_path
  fi

  # Install modern Bash on macOS or other systems with outdated Bash
  install_modern_bash

  log "INFO" "Checking for potential package conflicts"

  # Disable Homebrew analytics
  if command_exists brew && [[ $IS_ARM_LINUX -eq 0 ]]; then
    if [[ $dry_run -eq 0 ]]; then
      brew analytics off 2>/dev/null || log "WARN" "Failed to disable Homebrew analytics"
    else
      log "DRY" "Would disable Homebrew analytics"
    fi
  fi

  # Ensure Git is installed
  if ! command_exists git; then
    log "INFO" "Installing Git..."
    if [[ $dry_run -eq 0 ]]; then
      if [[ $IS_ARM_LINUX -eq 0 ]] && command_exists brew; then
        brew install git || {
          log "ERROR" "Failed to install Git with Homebrew"
          # Fall back to system package manager
          install_git_with_system_package_manager
        }
      else
        install_git_with_system_package_manager
      fi
    fi
  else
    log "INFO" "Git is already installed"
  fi

  # Create personal directory
  if [[ ! -d "$HOME/personal" ]]; then
    log "INFO" "Creating personal directory..."
    execute "mkdir -p \"$HOME/personal\"" "Creating personal directory"
  else
    log "INFO" "Personal directory already exists"
  fi

  # Create backup directory
  backup_dir="$HOME/personal/env-backup/$(date +%Y%m%d_%H%M%S)"
  if [[ ! -d "$backup_dir" ]]; then
    log "INFO" "Creating env-backup directory..."
    execute "mkdir -p \"$backup_dir\"" "Creating backup directory"
  fi

  # Clone or update repository
  if [[ ! -d "$DEV_ENV" ]]; then
    log "INFO" "Cloning dev-environment repository..."
    execute "git clone -b \"$REPO_BRANCH\" \"$REPO_URL\" \"$DEV_ENV\"" "Cloning repository"
  else
    log "INFO" "Development directory already exists"
    log "INFO" "Updating repository..."
    execute "cd \"$DEV_ENV\" && git pull" "Updating repository"
  fi

  # Source utilities if available
  if [[ -f "$DEV_ENV/utilities" ]]; then
    log "INFO" "Sourcing utilities script..."
    # shellcheck disable=SC1090
    source "$DEV_ENV/utilities" || {
      log "WARN" "Failed to source utilities script, continuing with limited functionality"
    }
  fi

  # Initialize submodules
  log "INFO" "Initializing submodules..."
  execute "cd \"$DEV_ENV\" && ./init" "Initializing submodules"

  # Run installation scripts
  log "INFO" "Running installation scripts..."
  execute "cd \"$DEV_ENV\" && ./run" "Running installation scripts"

  # Configure environment
  log "INFO" "Configuring the environment..."
  execute "cd \"$DEV_ENV\" && ./dev-env" "Configuring environment"

  log "SUCCESS" "Bootstrap completed successfully!"

  # Show summary information
  echo ""
  echo "-----------------------------------------------------"
  echo "           Dev Environment setup completed           "
  echo "-----------------------------------------------------"
  echo ""

  # Display Bash version information if upgraded
  if [[ "$OS" == "Darwin" ]]; then
    local brew_bash
    brew_bash="$(brew --prefix 2>/dev/null)/bin/bash"
    if [[ -f "$brew_bash" ]]; then
      local bash_version
      bash_version=$("$brew_bash" --version | head -n1 | cut -d' ' -f4)
      echo "Modern Bash $bash_version has been installed."
      echo "To use it as your default shell, run:"
      echo "  sudo chsh -s $brew_bash $USER"
      echo ""
      echo "For the current terminal session, run:"
      echo "  exec $brew_bash"
      echo ""
    fi
  fi

  # Platform-specific guidance
  if [[ $IS_ARM_LINUX -eq 1 ]]; then
    echo "ARM Linux system detected: Using system package managers instead of Homebrew"
    echo ""
    if command_exists zsh; then
      echo "To change your default shell to Zsh, run:"
      echo "  chsh -s $(command -v zsh)"
      echo ""
      echo "To start using Zsh immediately without logging out, run:"
      echo "  $(command -v zsh)"
      echo ""
    fi
  else
    # Homebrew shell setup
    if command_exists brew; then
      brew_path=$(brew --prefix 2>/dev/null)
      if [[ -n "$brew_path" && -f "$brew_path/bin/zsh" ]]; then
        echo "To change your default shell to Zsh, run:"
        echo "  chsh -s $brew_path/bin/zsh"
        echo ""
        echo "To start using Zsh immediately without logging out, run:"
        echo "  $brew_path/bin/zsh"
        echo ""
      elif command_exists zsh; then
        echo "To change your default shell to Zsh, run:"
        echo "  chsh -s $(command -v zsh)"
        echo ""
      fi
    fi
  fi

  echo "You may want to restart your terminal for all changes to take effect."
  echo ""
  echo "To update your environment in the future, run:"
  echo "  cd $DEV_ENV && ./update"
  echo ""
}

# Helper function to install Git with system package manager
install_git_with_system_package_manager() {
  log "INFO" "Installing Git with system package manager..."

  if command_exists apt; then
    execute "sudo apt-get update && sudo apt-get install -y git" "Installing Git with apt"
  elif command_exists pacman; then
    execute "sudo pacman -Sy --noconfirm git" "Installing Git with pacman"
  elif command_exists apk; then
    execute "sudo apk add --no-cache git" "Installing Git with apk"
  elif command_exists dnf; then
    execute "sudo dnf install -y git" "Installing Git with dnf"
  elif command_exists yum; then
    execute "sudo yum install -y git" "Installing Git with yum"
  else
    log "ERROR" "No supported package manager found"
    exit 1
  fi
}

# Run setup
setup

exit 0
