name: Test Dev Env

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  test-linux:
    name: Test on Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install modern Bash
        run: |
          echo "Installing Bash 5.x..."
          sudo apt-get update
          sudo apt-get install -y bash
          bash --version | head -n1
          # Verify Bash version meets requirements
          BASH_VERSION=$(bash --version | head -n1 | cut -d' ' -f4 | cut -d'.' -f1)
          if [[ $BASH_VERSION -lt 4 ]]; then
            echo "::error::Bash version is too old: $BASH_VERSION. Requires 4.0+"
            exit 1
          fi
          echo "Bash $BASH_VERSION installed successfully"

      - name: Set up environment
        run: |
          export DEV_ENV=$HOME/dev
          export XDG_CONFIG_HOME=$HOME/.config
          mkdir -p $DEV_ENV $XDG_CONFIG_HOME

      - name: Test utilities
        run: |
          cp -r . $HOME/dev/
          cd $HOME/dev
          source ./utilities
          command_exists bash

          # Test ARM detection functions
          echo "Testing architecture detection..."
          OS="$(uname -s)"
          ARCH="$(uname -m)"
          echo "OS: $OS, ARCH: $ARCH"
          echo "IS_ARM_CPU: $IS_ARM_CPU"
          echo "IS_ARM_LINUX: $IS_ARM_LINUX"

      - name: Test fd-find handling on Debian
        run: |
          cd $HOME/dev
          echo "Testing fd-find handling in runs/libs..."
          grep -q "fd-find" runs/libs
          if [ $? -ne 0 ]; then
            echo "::warning::fd-find handling may not be implemented properly"
          else
            echo "fd-find handling appears to be implemented"
          fi

      - name: Test dry run mode
        run: |
          cd $HOME/dev
          ./run --dry

      - name: Test init
        run: |
          cd $HOME/dev
          ./init

  test-macos:
    name: Test on macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install modern Bash
        run: |
          echo "Installing Bash 5.x..."
          brew install bash
          /usr/local/bin/bash --version | head -n1
          # Verify Bash version meets requirements
          BASH_VERSION=$(/usr/local/bin/bash --version | head -n1 | cut -d' ' -f4 | cut -d'.' -f1)
          if [[ $BASH_VERSION -lt 4 ]]; then
            echo "::error::Bash version is too old: $BASH_VERSION. Requires 4.0+"
            exit 1
          fi
          echo "Bash $BASH_VERSION installed successfully"
          # Make the new Bash available as 'bash'
          sudo ln -sf /usr/local/bin/bash /usr/local/bin/bash4
          echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV

      - name: Set up environment
        run: |
          export DEV_ENV=$HOME/dev
          export XDG_CONFIG_HOME=$HOME/.config
          mkdir -p $DEV_ENV $XDG_CONFIG_HOME

      - name: Test utilities
        run: |
          cp -r . $HOME/dev/
          cd $HOME/dev
          which bash
          bash --version
          source ./utilities
          command_exists bash

          # Test ARM detection functions for Apple Silicon simulation
          echo "Testing architecture detection with simulated ARM..."
          # Simulate ARM detection for testing
          ARCH="arm64"
          IS_ARM_CPU=1
          echo "Simulated ARCH: $ARCH"
          echo "Simulated IS_ARM_CPU: $IS_ARM_CPU"

          # Test platform-specific code paths
          if [[ "$IS_ARM_CPU" -eq 1 ]]; then
            echo "ARM CPU detection is working"
          else
            echo "ARM CPU detection failed"
          fi

      - name: Test dry run mode
        run: |
          cd $HOME/dev
          ./run --dry

      - name: Test init
        run: |
          cd $HOME/dev
          ./init

  test-specific-components:
    name: Test Specific Components
    runs-on: ubuntu-latest
    needs: [test-linux, test-macos]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install modern Bash
        run: |
          sudo apt-get update
          sudo apt-get install -y bash

      - name: Set up environment
        run: |
          export DEV_ENV=$HOME/dev
          export XDG_CONFIG_HOME=$HOME/.config
          mkdir -p $DEV_ENV $XDG_CONFIG_HOME
          cp -r . $HOME/dev/

      - name: Test equality operators
        run: |
          cd $HOME/dev
          echo "Checking for inconsistent equality operators..."
          # Look for string comparisons with = instead of ==
          grep -r "\[ \"\$[A-Za-z0-9_]*\" = " --include="*.sh" --include="run*" --include="utilities" .
          if [ $? -eq 0 ]; then
            echo "::warning::Found potential inconsistent equality operators (using = instead of ==)"
          else
            echo "No inconsistent equality operators found (good!)"
          fi

      - name: Test curl commands
        run: |
          cd $HOME/dev
          echo "Checking for curl commands without error handling..."
          grep -r "curl " --include="*.sh" --include="run*" --include="utilities" . | grep -v "safe_curl" | grep -v "if.*curl"
          if [ $? -eq 0 ]; then
            echo "::warning::Found potential curl commands without proper error handling"
          else
            echo "All curl commands appear to use proper error handling"
          fi

      - name: Verify sourcing protections
        run: |
          cd $HOME/dev
          echo "Checking for proper source handling..."
          grep -r "source " --include="*.sh" --include="run*" --include="utilities" . | grep -v "|| {"
          if [ $? -eq 0 ]; then
            echo "::warning::Found potential unprotected source commands"
          else
            echo "All source commands appear to have proper error handling"
          fi
