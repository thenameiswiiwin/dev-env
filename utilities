#!/usr/bin/env bash
# utilities - Core utility functions for development environment setup

set -euo pipefail

# Ensure consistent environment variables
: "${DEV_ENV:="$HOME/dev"}"
: "${XDG_CONFIG_HOME:="$HOME/.config"}"
export DEV_ENV XDG_CONFIG_HOME
export HOMEBREW_NO_ENV_HINTS=1
export HOMEBREW_NO_INSTALL_CLEANUP="${HOMEBREW_NO_INSTALL_CLEANUP:-1}"

# System detection
OS="$(uname -s)"
ARCH="$(uname -m)"
readonly OS
readonly ARCH

# Architecture detection
# Use explicit flag for ARM detection (better than string comparison)
IS_ARM_CPU=$([ "$ARCH" == "arm64" ] || [ "$ARCH" == "aarch64" ] && echo 1 || echo 0)
IS_ARM_LINUX=$([ "$IS_ARM_CPU" -eq 1 ] && [ "$OS" == "Linux" ] && echo 1 || echo 0)
readonly IS_ARM_CPU
readonly IS_ARM_LINUX

# Color definitions
readonly COLOR_RED="\033[1;31m"
readonly COLOR_GREEN="\033[1;32m"
readonly COLOR_YELLOW="\033[1;33m"
readonly COLOR_BLUE="\033[1;34m"
readonly COLOR_CYAN="\033[1;36m"
readonly COLOR_RESET="\033[0m"

# Standard logging function with consistent format
# Usage: log "INFO" "Message"
log() {
  local level="$1"
  local message="$2"
  local color=""

  case "$level" in
  SUCCESS) color="$COLOR_GREEN" ;;
  INFO) color="$COLOR_BLUE" ;;
  WARN) color="$COLOR_YELLOW" ;;
  ERROR) color="$COLOR_RED" ;;
  DRY) color="$COLOR_CYAN" ;;
  *) color="$COLOR_RESET" ;;
  esac

  if [[ ${DRY_RUN:-0} -eq 1 && "$level" != "DRY" ]]; then
    echo -e "${COLOR_CYAN}[DRY_RUN]${COLOR_RESET} $message"
  else
    echo -e "${color}[$level]${COLOR_RESET} $message"
  fi
}

# Command existence checker
# Usage: command_exists "brew"
command_exists() {
  command -v "$1" &>/dev/null
}

# Homebrew package check
# Usage: brew_installed "git"
brew_installed() {
  # Skip for ARM Linux systems - use system packages
  if [[ "$IS_ARM_LINUX" -eq 1 ]]; then
    return 1
  fi

  if command_exists brew; then
    if brew list --formula 2>/dev/null | grep -q "^$1\$"; then
      return 0
    fi
  fi
  return 1
}

# Homebrew cask check for macOS
# Usage: cask_installed "visual-studio-code"
cask_installed() {
  if command_exists brew && [[ "$OS" == "Darwin" ]]; then
    if brew list --cask 2>/dev/null | grep -q "^$1\$"; then
      return 0
    fi
  fi
  return 1
}

# Safe command execution
# Usage: execute "command" "command description"
execute() {
  local cmd="$1"
  local description="${2:-Executing command}"

  if [[ ${DRY_RUN:-0} -eq 1 ]]; then
    log "DRY" "$description: $cmd"
    return 0
  else
    log "INFO" "$description"
    if eval "$cmd"; then
      return 0
    else
      local exit_code=$?
      log "ERROR" "Command failed with exit code $exit_code: $cmd"
      return $exit_code
    fi
  fi
}

# Safe curl execution with proper error handling
# Usage: safe_curl "url" "output_file" "description"
safe_curl() {
  local url="$1"
  local output="${2:-}"
  local description="${3:-Downloading from $url}"
  local curl_opts="-fsSL --connect-timeout 15 --retry 3"

  if [[ -n "$output" ]]; then
    curl_opts="$curl_opts -o $output"
  fi

  log "INFO" "$description"

  if [[ ${DRY_RUN:-0} -eq 1 ]]; then
    log "DRY" "Would run: curl $curl_opts $url"
    return 0
  else
    if curl $curl_opts "$url"; then
      return 0
    else
      local exit_code=$?
      log "ERROR" "curl failed with exit code $exit_code: $url"
      return $exit_code
    fi
  fi
}

# Homebrew initialization based on platform
init_homebrew() {
  # Skip Homebrew on ARM Linux - use system packages
  if [[ "$IS_ARM_LINUX" -eq 1 ]]; then
    log "INFO" "Using system packages on ARM Linux"
    return 0
  fi

  # Platform-specific initialization
  if [[ "$OS" == "Darwin" ]]; then
    # macOS - handle ARM vs Intel
    if [[ "$ARCH" == "arm64" && -f /opt/homebrew/bin/brew ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -f /usr/local/bin/brew ]]; then
      eval "$(/usr/local/bin/brew shellenv)"
    fi
  elif [[ "$OS" == "Linux" ]]; then
    # Linux Homebrew locations
    if [[ -d "$HOME/.linuxbrew" ]]; then
      eval "$("$HOME"/.linuxbrew/bin/brew shellenv)"
    elif [[ -d "/home/linuxbrew/.linuxbrew" ]]; then
      eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    fi
  fi
}

# Get system package manager
get_system_package_manager() {
  if command_exists apt; then
    echo "apt"
  elif command_exists pacman; then
    echo "pacman"
  elif command_exists apk; then
    echo "apk"
  elif command_exists dnf; then
    echo "dnf"
  elif command_exists yum; then
    echo "yum"
  elif command_exists zypper; then
    echo "zypper"
  else
    echo ""
  fi
}

# Install package with system package manager
# Usage: install_with_system_package_manager "package_name"
install_with_system_package_manager() {
  local package="$1"
  local pkg_manager
  pkg_manager=$(get_system_package_manager)

  case "$pkg_manager" in
  "apt")
    execute "sudo apt-get update -qq && sudo apt-get install -y $package" "Installing $package with apt"
    return $?
    ;;
  "pacman")
    execute "sudo pacman -Sy --noconfirm $package" "Installing $package with pacman"
    return $?
    ;;
  "apk")
    execute "sudo apk add --no-cache $package" "Installing $package with apk"
    return $?
    ;;
  "dnf")
    execute "sudo dnf install -y $package" "Installing $package with dnf"
    return $?
    ;;
  "yum")
    execute "sudo yum install -y $package" "Installing $package with yum"
    return $?
    ;;
  "zypper")
    execute "sudo zypper install -y $package" "Installing $package with zypper"
    return $?
    ;;
  *)
    log "ERROR" "No supported package manager found"
    return 1
    ;;
  esac
}

# Unified package installation with fallbacks
# Usage: install_package "package_name" [skip_if_installed]
install_package() {
  local package="$1"
  local skip_if_installed=${2:-true}

  # ARM Linux systems use system package manager directly
  if [[ "$IS_ARM_LINUX" -eq 1 ]]; then
    log "INFO" "Using system package manager for $package on ARM Linux"
    install_with_system_package_manager "$package"
    return $?
  fi

  # Skip if already installed
  if [[ "$skip_if_installed" == true ]] && brew_installed "$package"; then
    log "INFO" "$package is already installed, skipping"
    return 0
  fi

  # Try Homebrew first
  log "INFO" "Installing $package with Homebrew"
  if brew install "$package" 2>/dev/null; then
    log "INFO" "$package installed successfully with Homebrew"
    return 0
  elif [[ "$OS" == "Linux" ]]; then
    # Fallback to system package manager on Linux
    log "WARN" "Homebrew installation failed, trying system package manager"
    install_with_system_package_manager "$package"
    return $?
  else
    log "ERROR" "Failed to install $package"
    return 1
  fi
}

# macOS-specific cask installation
# Usage: install_cask "package_name" [skip_if_installed]
install_cask() {
  local package="$1"
  local skip_if_installed=${2:-true}

  if [[ "$OS" != "Darwin" ]]; then
    log "WARN" "Cask packages are only available on macOS, skipping $package"
    return 0
  fi

  if [[ "$skip_if_installed" == true ]] && cask_installed "$package"; then
    log "INFO" "$package is already installed, skipping"
    return 0
  fi

  log "INFO" "Installing cask $package"
  execute "brew install --cask $package" "Installing $package cask"
  return $?
}

# Check required environment variables
# Usage: check_required_env "VAR1" "VAR2"
check_required_env() {
  local missing=false

  for var in "$@"; do
    if [[ -z "${!var:-}" ]]; then
      log "ERROR" "Required environment variable $var is not set"
      missing=true
    fi
  done

  if $missing; then
    return 1
  fi

  return 0
}

# Check if running in interactive mode
# Usage: is_interactive
is_interactive() {
  [[ -t 0 ]]
}

# Interactive prompt with fallback for non-interactive mode
# Usage: prompt "Question?" "default_answer"
prompt() {
  local question="$1"
  local default="${2:-n}"
  local response=""

  if is_interactive; then
    read -r -p "$question [${default}]: " response
    response="${response:-$default}"
  else
    log "INFO" "Non-interactive mode detected, using default: $default"
    response="$default"
  fi

  echo "$response"
}

# Generate consistent backup timestamp
# Usage: get_backup_timestamp
get_backup_timestamp() {
  date +%Y%m%d_%H%M%S
}

# Backup a file before modifying
# Usage: backup_file "/path/to/file"
backup_file() {
  local file="$1"
  local backup_dir
  backup_dir="$HOME/personal/env-backup/$(get_backup_timestamp)"

  if [[ ! -f "$file" ]]; then
    return 0
  fi

  if [[ ${DRY_RUN:-0} -eq 1 ]]; then
    log "DRY" "Would back up $file to $backup_dir"
    return 0
  fi

  mkdir -p "$backup_dir" || {
    log "ERROR" "Failed to create backup directory: $backup_dir"
    return 1
  }

  local filename
  filename=$(basename "$file")
  local backup_file="$backup_dir/$filename"

  log "INFO" "Backing up $file to $backup_file"
  if cp -f "$file" "$backup_file"; then
    return 0
  else
    log "ERROR" "Failed to backup $file"
    return 1
  fi
}

# Backup a directory before modifying
# Usage: backup_directory "/path/to/directory"
backup_directory() {
  local dir="$1"
  local backup_dir
  backup_dir="$HOME/personal/env-backup/$(get_backup_timestamp)"

  if [[ ! -d "$dir" ]]; then
    return 0
  fi

  if [[ ${DRY_RUN:-0} -eq 1 ]]; then
    log "DRY" "Would back up directory $dir to $backup_dir"
    return 0
  fi

  mkdir -p "$backup_dir" || {
    log "ERROR" "Failed to create backup directory: $backup_dir"
    return 1
  }

  local dirname
  dirname=$(basename "$dir")
  local backup_path="$backup_dir/$dirname"

  log "INFO" "Backing up directory $dir to $backup_path"
  if cp -rf "$dir" "$backup_dir/"; then
    return 0
  else
    log "ERROR" "Failed to backup directory $dir"
    return 1
  fi
}

# Safely add a line after pattern in file
# Usage: append_after_pattern "file" "pattern" "new_line"
append_after_pattern() {
  local file="$1"
  local pattern="$2"
  local new_line="$3"

  if [[ ! -f "$file" ]]; then
    log "ERROR" "File not found: $file"
    return 1
  fi

  if grep -q "$new_line" "$file"; then
    log "INFO" "Line already exists in $file, skipping"
    return 0
  fi

  backup_file "$file"

  if [[ ${DRY_RUN:-0} -eq 1 ]]; then
    log "DRY" "Would add \"$new_line\" after pattern \"$pattern\" in $file"
    return 0
  fi

  local tmp_file
  tmp_file=$(mktemp)

  awk -v pat="$pattern" -v line="$new_line" '{
    print $0;
    if ($0 ~ pat) {
      print line;
    }
  }' "$file" >"$tmp_file" && mv "$tmp_file" "$file"

  if [ $? -eq 0 ]; then
    log "INFO" "Added line to $file"
    return 0
  else
    log "ERROR" "Failed to modify $file"
    return 1
  fi
}

# Ensure a line exists in a file
# Usage: ensure_line_in_file "file" "line"
ensure_line_in_file() {
  local file="$1"
  local line="$2"

  if [[ ! -f "$file" ]]; then
    log "ERROR" "File not found: $file"
    return 1
  fi

  if grep -q "$line" "$file"; then
    log "INFO" "Line already exists in $file, skipping"
    return 0
  fi

  backup_file "$file"

  if [[ ${DRY_RUN:-0} -eq 1 ]]; then
    log "DRY" "Would append \"$line\" to $file"
    return 0
  fi

  echo "$line" >>"$file"
  local exit_code=$?

  if [ $exit_code -eq 0 ]; then
    log "INFO" "Added line to $file"
    return 0
  else
    log "ERROR" "Failed to modify $file"
    return 1
  fi
}

# Configure Zsh plugins with platform awareness
# Usage: configure_zsh_plugins
configure_zsh_plugins() {
  local zshrc="$HOME/.zshrc"

  if [[ ! -f "$zshrc" ]]; then
    log "ERROR" "Zsh configuration file not found: $zshrc"
    return 1
  fi

  backup_file "$zshrc"

  # Avoid unbound variable warnings
  local FPATH="${FPATH:-}"

  # Platform-aware path detection for Zsh plugins
  local autosuggestions_paths=(
    "/usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    "/opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    "/home/linuxbrew/.linuxbrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    "$HOME/.linuxbrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    "/usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
  )

  for path in "${autosuggestions_paths[@]}"; do
    if [[ -f "$path" ]]; then
      ensure_line_in_file "$zshrc" "source $path"
      break
    fi
  done

  local syntax_paths=(
    "/usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    "/opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    "/home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    "$HOME/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    "/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
  )

  for path in "${syntax_paths[@]}"; do
    if [[ -f "$path" ]]; then
      ensure_line_in_file "$zshrc" "source $path"
      break
    fi
  done

  # Homebrew completions for non-ARM systems
  if command_exists brew && [[ "$IS_ARM_CPU" -eq 0 || "$OS" == "Darwin" ]]; then
    local completions_script="
# Zsh Completions
if type brew &>/dev/null; then
    FPATH=\"\$(brew --prefix)/share/zsh-completions:\${FPATH}\"
    autoload -Uz compinit
    compinit
fi"

    if ! grep -q "Zsh Completions" "$zshrc"; then
      if [[ ${DRY_RUN:-0} -eq 1 ]]; then
        log "DRY" "Would add Zsh completions configuration to $zshrc"
      else
        echo "$completions_script" >>"$zshrc"
        log "INFO" "Added Zsh completions configuration to $zshrc"
      fi
    fi
  fi

  log "SUCCESS" "Zsh plugins configured"
  return 0
}

# Make file executable
# Usage: make_executable "/path/to/file"
make_executable() {
  local file="$1"

  if [[ ! -f "$file" ]]; then
    log "ERROR" "File not found: $file"
    return 1
  fi

  if [[ -x "$file" ]]; then
    log "INFO" "File is already executable: $file"
    return 0
  fi

  if [[ ${DRY_RUN:-0} -eq 1 ]]; then
    log "DRY" "Would make file executable: $file"
    return 0
  fi

  if chmod +x "$file"; then
    log "INFO" "Made file executable: $file"
    return 0
  else
    log "ERROR" "Failed to make file executable: $file"
    return 1
  fi
}

# Create a symlink with proper backup
# Usage: create_symlink "/path/to/source" "/path/to/destination"
create_symlink() {
  local source="$1"
  local destination="$2"

  if [[ ! -e "$source" ]]; then
    log "ERROR" "Source does not exist: $source"
    return 1
  fi

  # Check if symlink already correct
  if [[ -L "$destination" ]]; then
    local target
    if target=$(readlink -f "$destination" 2>/dev/null || readlink "$destination"); then
      local source_path
      source_path=$(readlink -f "$source" 2>/dev/null || echo "$source")
      if [[ "$target" == "$source_path" ]]; then
        log "INFO" "Symlink already correct: $destination -> $source"
        return 0
      fi
    fi
  fi

  # Backup existing destination
  if [[ -e "$destination" || -L "$destination" ]]; then
    if [[ -f "$destination" ]]; then
      backup_file "$destination"
    elif [[ -d "$destination" ]]; then
      backup_directory "$destination"
    fi

    if [[ ${DRY_RUN:-0} -eq 1 ]]; then
      log "DRY" "Would remove existing destination: $destination"
    else
      rm -rf "$destination" || {
        log "ERROR" "Failed to remove existing destination: $destination"
        return 1
      }
    fi
  fi

  # Create parent directory if needed
  local parent_dir
  parent_dir=$(dirname "$destination")
  if [[ ! -d "$parent_dir" ]]; then
    if [[ ${DRY_RUN:-0} -eq 1 ]]; then
      log "DRY" "Would create parent directory: $parent_dir"
    else
      mkdir -p "$parent_dir" || {
        log "ERROR" "Failed to create parent directory: $parent_dir"
        return 1
      }
    fi
  fi

  # Create symlink
  if [[ ${DRY_RUN:-0} -eq 1 ]]; then
    log "DRY" "Would create symlink: $destination -> $source"
    return 0
  fi

  if ln -sf "$source" "$destination"; then
    log "INFO" "Created symlink: $destination -> $source"
    return 0
  else
    log "ERROR" "Failed to create symlink: $destination -> $source"
    return 1
  fi
}

# Map OS package name to distribution-specific package name
# Usage: map_package_name "apt_package_name" "os_package_manager"
map_package_name() {
  local package="$1"
  local os_pkg_manager="$2"

  # Handle common package name differences between distributions
  case "$os_pkg_manager" in
  "pacman")
    case "$package" in
    "build-essential") echo "base-devel" ;;
    "libevent-dev") echo "libevent" ;;
    "libncurses-dev") echo "ncurses" ;;
    "python3-dev") echo "python-dev" ;;
    "fd") echo "fd" ;;
    *) echo "$package" ;;
    esac
    ;;
  "apk")
    case "$package" in
    "build-essential") echo "build-base" ;;
    "libevent-dev") echo "libevent-dev" ;;
    "libncurses-dev") echo "ncurses-dev" ;;
    "python3-dev") echo "python3-dev" ;;
    "fd") echo "fd" ;;
    *) echo "$package" ;;
    esac
    ;;
  "dnf" | "yum")
    case "$package" in
    "build-essential") echo "gcc gcc-c++ make" ;;
    "fd") echo "fd-find" ;;
    *) echo "$package" ;;
    esac
    ;;
  "apt")
    case "$package" in
    "fd") echo "fd-find" ;;
    *) echo "$package" ;;
    esac
    ;;
  *)
    echo "$package"
    ;;
  esac
}
